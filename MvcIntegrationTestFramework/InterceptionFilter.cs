// --------------------------------------------------------------------------------------------------------------------
// <copyright file="InterceptionFilter.cs" company="Public">
//   Free
// </copyright>
// <summary>
//   An ASP.NET MVC filter attached automatically to all controllers invoked within the test application
//   This is used to capture action results and other output generated by each request
// </summary>
// --------------------------------------------------------------------------------------------------------------------

namespace MvcIntegrationTestFramework
{
    using System.Web;
    using System.Web.Mvc;

    /// <summary>
    ///   An ASP.NET MVC filter attached automatically to all controllers invoked within the test application
    ///   This is used to capture action results and other output generated by each request
    /// </summary>
    internal sealed class InterceptionFilter : ActionFilterAttribute
    {
        /// <summary>
        /// A reference to the previous HttpContext.
        /// </summary>
        private HttpContext lastHttpContext;

        /// <summary>
        /// Called by the ASP.NET MVC framework after the action method executes.
        /// </summary>
        /// <param name="filterContext">The filter context.</param>
        public override void OnActionExecuted(ActionExecutedContext filterContext)
        {
            if (this.lastHttpContext == null)
            {
                this.lastHttpContext = HttpContext.Current;
            }

            // Clone to get a more stable snapshot
            if ((filterContext != null) && (LastRequestData.ActionExecutedContext == null))
            {
                LastRequestData.ActionExecutedContext = new ActionExecutedContext
                    {
                        ActionDescriptor = filterContext.ActionDescriptor, 
                        Canceled = filterContext.Canceled, 
                        Controller = filterContext.Controller, 
                        Exception = filterContext.Exception, 
                        ExceptionHandled = filterContext.ExceptionHandled, 
                        HttpContext = filterContext.HttpContext, 
                        RequestContext = filterContext.RequestContext, 
                        Result = filterContext.Result, 
                        RouteData = filterContext.RouteData
                    };
            }
        }

        /// <summary>
        /// Called by the ASP.NET MVC framework after the action result executes.
        /// </summary>
        /// <param name="filterContext">The filter context.</param>
        public override void OnResultExecuted(ResultExecutedContext filterContext)
        {
            // Clone to get a more stable snapshot
            if ((filterContext != null) && (LastRequestData.ResultExecutedContext == null))
            {
                LastRequestData.ResultExecutedContext = new ResultExecutedContext
                    {
                        Canceled = filterContext.Canceled, 
                        Exception = filterContext.Exception, 
                        Controller = filterContext.Controller, 
                        ExceptionHandled = filterContext.ExceptionHandled, 
                        HttpContext = filterContext.HttpContext, 
                        RequestContext = filterContext.RequestContext, 
                        Result = filterContext.Result, 
                        RouteData = filterContext.RouteData
                    };
            }
        }
    }
}